# {{.Config.Name}} TypeScript Client

TypeScript client library for {{.Config.Name}} health endpoints.

## Installation

```bash
npm install {{.Config.Name}}-client
```

## Usage

```typescript
import { HealthClient } from '{{.Config.Name}}-client';

const client = new HealthClient({
  baseURL: 'http://localhost:8080',
  timeout: 5000,
});

// Check health status
const health = await client.checkHealth();
console.log('Health status:', health.status);

// Get server time
const serverTime = await client.getServerTime();
console.log('Server time:', serverTime.formatted);

// Check readiness
const readiness = await client.checkReadiness();
console.log('Readiness:', readiness.status);

// Check liveness
const liveness = await client.checkLiveness();
console.log('Liveness:', liveness.status);
```

## API

### HealthClient

#### Constructor

```typescript
new HealthClient(config: HealthClientConfig)
```

- `config.baseURL` - Base URL of the health service
- `config.timeout` - Request timeout in milliseconds (default: 5000)
- `config.headers` - Additional headers to send with requests

#### Methods

- `checkHealth(): Promise<HealthReport>` - Get overall health status
- `getServerTime(): Promise<ServerTime>` - Get server time information
- `checkReadiness(): Promise<HealthReport>` - Check if service is ready
- `checkLiveness(): Promise<HealthReport>` - Check if service is alive
- `checkStartup(): Promise<HealthReport>` - Check if service has started up

## Types

See `src/types.ts` for complete type definitions.

## Generated by

Template Health Endpoint Generator v{{.Version}}
Generated at: {{.Timestamp}}
