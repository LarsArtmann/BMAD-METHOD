name: Release

on:
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '20'

jobs:
  test:
    name: Test before release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install TypeSpec
      run: npm install -g @typespec/compiler

    - name: Run tests
      run: go test -v ./...

    - name: Validate schemas
      run: bash scripts/validate-schemas.sh

  build:
    name: Build binaries
    runs-on: ubuntu-latest
    needs: test
    
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Get version
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        mkdir -p dist
        BINARY_NAME="bmad-method"
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        
        go build \
          -ldflags="-s -w -X main.version=${{ steps.version.outputs.VERSION }} -X main.buildDate=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
          -o dist/${BINARY_NAME} \
          ./cmd/generator
        
        # Create archive
        cd dist
        if [ "$GOOS" = "windows" ]; then
          zip -r bmad-method-${{ steps.version.outputs.VERSION }}-${GOOS}-${GOARCH}.zip ${BINARY_NAME}
        else
          tar -czf bmad-method-${{ steps.version.outputs.VERSION }}-${GOOS}-${GOARCH}.tar.gz ${BINARY_NAME}
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: bmad-method-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/bmad-method-*
        retention-days: 7

  docker:
    name: Build Docker images
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          larsartmann/bmad-method
          ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  homebrew:
    name: Update Homebrew formula
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Update Homebrew formula
      uses: dawidd6/action-homebrew-bump-formula@v3
      with:
        token: ${{ secrets.HOMEBREW_TOKEN }}
        formula: bmad-method

  release:
    name: Create GitHub release
    runs-on: ubuntu-latest
    needs: [build, docker]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find artifacts -name "*.tar.gz" -o -name "*.zip" | xargs -I {} cp {} release-assets/

    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git tag --sort=-version:refname | head -n 2 | tail -n 1)
        if [ -z "$PREVIOUS_TAG" ]; then
          PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
        fi
        
        # Generate changelog
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "## What's Changed" >> $GITHUB_OUTPUT
        git log --pretty=format:"* %s (%h)" $PREVIOUS_TAG..HEAD >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        files: release-assets/*
        body: |
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## Installation
          
          ### Homebrew (macOS/Linux)
          ```bash
          brew install larsartmann/tap/bmad-method
          ```
          
          ### Manual Installation
          Download the appropriate binary for your platform from the assets below.
          
          ### Docker
          ```bash
          docker run --rm -v $(pwd):/workspace ghcr.io/${{ github.repository }}:${{ github.ref_name }}
          ```
          
          ## Checksums
          ```
          $(cd release-assets && sha256sum *)
          ```
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}
        generate_release_notes: true

  notify:
    name: Notify release
    runs-on: ubuntu-latest
    needs: release
    if: always()
    
    steps:
    - name: Notify Discord
      if: success()
      run: |
        curl -H "Content-Type: application/json" \
          -X POST \
          -d "{\"content\": \"ðŸš€ BMAD Method ${{ github.ref_name }} has been released! https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}\"}" \
          ${{ secrets.DISCORD_WEBHOOK_URL }}

    - name: Notify Twitter
      if: success()
      run: |
        # Placeholder for Twitter API integration
        echo "New release ${{ github.ref_name }} ready for announcement"